#!/bin/sh

# This tool harvests software metadata from source code repositories and makes it available as codemeta

SCRIPTDIR="$(realpath "$(dirname "$0")")"
DEBUG=0

die() {
    DEBUG=1
    flushlog
    echo "[harvester fatal error] $*">&2
    exit 2
}

error() {
    OLDDEBUG=$DEBUG
    DEBUG=1
    flushlog
    DEBUG=$OLDDEBUG
    echo "[harvester error] $*">&2
}

info() {
    echo "[harvester info] $*">&2
}

debug() {
    if [ "$DEBUG" -gt 0 ]; then
        echo "[harvester debug] $*">&2
    fi
}

flushlog() {
    if [ "$DEBUG" -gt 0 ] && [ -e "$TMPLOG" ]; then
        echo "-- begin log --" >&2
        cat "$TMPLOG" >&2
        echo "-- end log --" >&2
        rm "$TMPLOG"
    fi
}

usage() {
    echo "codemeta-harvester [--debug] [--ignore] [--regen] [--cachedir path] [--baseuri uri] [--outputdir path] [--opts codemetapy-options] [CONFIG_FILE_OR_DIRECTORY] ...">&2
    echo "   This tool harvests software metadata from source code repositories and makes it available as codemeta."
    echo "   If not file or directory is specified, the harvester will attempt to extract" >&2
    echo "   software metadata for the project in the current working directory and write a codemeta.json file there." >&2
    echo "">&2
    echo "Options:">&2
    echo "  --regen             Ignores reading the existing codemeta.json and regenerate it again (overwrites!)">&2
    echo "  --ignore            Ignores reading the existing codemeta.json">&2
    echo "  --baseuri [URI]     Sets the base URI to use for all RDF resources">&2
    echo "  --opts [ARGS]       Extra options to pass to codemetapy">&2
    echo "  --identifier [ARGS] Force this identifier (only works when not providing explicit input files)">&2
    echo "  --cachedir [PATH]   Directory to use for caching and storage of temporary files, all git repos will be cloned here">&2
    echo "  --debug             Output all logs"
    echo "  --keep              Keep intermediate output (in cachedir), don't clean up (useful for debugging)"
    echo "  --strict            Fail a conversion if one of it's main components fails"
    echo "  --stdout            Don't write files but output to stdout"
}

missing=0
DEPENDENCIES="git sed python3 dasel codemetapy cffconvert recode awk"
for dependency in $DEPENDENCIES; do
    if ! command -v "$dependency" >/dev/null 2>/dev/null; then
        error "dependency $dependency not found" && missing=1
    fi
done
[ "$missing" -eq 1 ] && die "there are missing dependencies"

[ -n "$TMPDIR" ] || TMPDIR="/tmp"

CACHEDIR="$TMPDIR/codemeta-harvester.cache/"
KEEPCACHE=0
IGNORE=0
REGEN=0
CLEAN_README=0
STRICT=0
STDOUT=0
OUTPUTDIR=$(realpath .)
CODEMETAPY_ARGS=""

while :; do
    case $1 in
        -h|--help)
            usage
            exit
            ;;
        -C|--cachedir)
            CACHEDIR=$2
            shift
            ;;
        -O|--outputdir)
            OUTPUTDIR="$(realpath "$2")"
            shift
            ;;
        -b|--baseuri)
            CODEMETAPY_ARGS="$CODEMETAPY_ARGS --baseuri $2"
            shift
            ;;
        --keep)
            KEEPCACHE=1
            ;;
        --ignore)
            IGNORE=1
            ;;
        --regen)
            REGEN=1
            IGNORE=1
            ;;
        --debug)
            DEBUG=1
            ;;
        --identifier)
            IDENTIFIER="$2"
            shift
            ;;
        --strict)
            STRICT=1
            ;;
        --stdout)
            STDOUT=1
            ;;
        --opts)
            CODEMETAPY_ARGS="$CODEMETAPY_ARGS $2"
            shift
            ;;
        -?*)
            die "Unknown option: $1"
            ;;
        *)
            break
    esac

    shift
done

TMPLOG="$CACHEDIR/codemeta-harvester.debug"

mkdir -p "$CACHEDIR" "$CACHEDIR/tmp" || die "Unable to create cache directory $CACHEDIR"

harvest() {
    # Harvest metadata from the current directory and convert it to codemeta
    ID="$1"
    REF="$2" #git ref
    CODEMETAPY_RECONCILE_ARGS="$3"
    if [ "$REF" != "master" ] && [ "$REF" != "main" ] && [ "$REF" != "develop" ] && [ "$REF" != "base" ]; then
        #assume we are on a release
        CODEMETAPY_RECONCILE_ARGS="$CODEMETAPY_RECONCILE_ARGS --released"
    fi
    SCANDIRS="$4 ."
    #ensure there is nothing left from previous runs (might happen if one was run with --keep)
    rm -rf "$CACHEDIR/tmp/"*".$ID.codemeta.json"
    for scandir in $SCANDIRS; do
        oldcwd="$(pwd)"
        [ ! -d "$scandir" ] && continue
        cd "$scandir" || die "Unable to enter $scandir"

        CLEAN_README=0

        #First we grab all possible metadata and store it in the tmp dir
        if [ -e codemeta.json ] && [ $IGNORE -eq 0 ]; then
            #If there is an explicit codemeta.json, we will forego on all other detection methods
            #and assume it it the sole authoritative source for metadata.
            info "found codemeta for $ID"
            #basic sanity check to see if the codemeta is well-formed (=no syntax errors)
            if dasel -n -f codemeta.json > /dev/null; then
                cp codemeta.json "$CACHEDIR/tmp/00-jsonld.$ID.codemeta.json"
                #                               ^-- lowest number indicates highest priority
            else
                error "codemeta.json for $ID is not well-formed"
                [ $STRICT -eq 1 ] && return 1
            fi
        else
            #No codemeta found, automatically extract from other sources.
            #(This allows for recombining from multiple sources)

            #If there is a codemeta-harvest.json, we will add it to
            #any other existing metadata that can be found
            if [ -e codemeta-harvest.json ]; then
                info "found codemeta-harvest.json for $ID"
                #basic sanity check to see if the codemeta is well-formed (=no syntax errors)
                if dasel -n -f codemeta-harvest.json > /dev/null; then
                    cp codemeta-harvest.json "$CACHEDIR/tmp/00-harvest.$ID.codemeta.json"
                    #                               ^-- lowest number indicates highest priority
                else
                    error "codemeta-harvest.json for $ID is not well-formed"
                    [ $STRICT -eq 1 ] && return 1
                fi
            fi

            for f in CITATION.cff CITATION.CFF CITATION; do
                if [ -e "$f" ]; then
                    info "found CITATION.cff for $ID, converting to codemeta"
                    if ! cffconvert -i "$f" -o "$CACHEDIR/tmp/10-citationcff.$ID.codemeta.json" -f codemeta 2> "$TMPLOG" >&2; then
                        error "CITATION.cff to codemeta conversion for $ID failed"
                        [ $STRICT -eq 1 ] && return 1
                    fi
                    flushlog
                    break
                fi
            done

            if [ -e setup.py ] || [ -e pyproject.toml ]; then
                info "found python setup for $ID, converting to codemeta"
                #shellcheck disable=SC2086 #(allow globbing and splitting for $CODEMETAPY_ARGS)
                if ! codemetapy $CODEMETAPY_ARGS -O "$CACHEDIR/tmp/20-python.$ID.codemeta.json" 2> "$TMPLOG" >&2; then
                    error "python setup.py to codemeta conversion failed for $ID (codemetapy failed)"
                    [ $STRICT -eq 1 ] && return 1
                fi
                flushlog
            fi

            if [ -e pom.xml ]; then
                info "found pom.xml (Java/Maven) for $ID, converting to codemeta"
                #shellcheck disable=SC2086 #(allow globbing and splitting for $CODEMETAPY_ARGS)
                if ! codemetapy $CODEMETAPY_ARGS -O "$CACHEDIR/tmp/21-java.$ID.codemeta.json" pom.xml 2> "$TMPLOG" >&2; then
                    error "pom.xml to codemeta conversion failed for $ID (codemetapy failed)"
                    [ $STRICT -eq 1 ] && return 1
                fi
                flushlog
            fi

            if [ -e package.json ]; then
                info "found package.json (NodeJS) for $ID, converting to codemeta"
                #shellcheck disable=SC2086 #(allow globbing and splitting for $CODEMETAPY_ARGS)
                if ! codemetapy $CODEMETAPY_ARGS -O "$CACHEDIR/tmp/22-npm.$ID.codemeta.json" package.json 2> "$TMPLOG" >&2; then
                    error "package.json to codemeta conversion failed for $ID (codemetapy failed)"
                    [ $STRICT -eq 1 ] && return 1
                fi
                flushlog
            fi


            [ -e "$SCRIPTDIR/detect-license.sh" ] || die "Unable to find detect-license.sh in $SCRIPTDIR"
            info "Looking for license...."
            SPDX=$("$SCRIPTDIR/detect-license.sh" 2> "$TMPLOG")
            if [ -n "$SPDX" ]; then
                echo "{ \"license\": \"$SPDX\" }" > "$CACHEDIR/tmp/29-license.$ID.codemeta.json"
            fi
            flushlog

            if [ -f MAINTAINERS ]; then
                info "Parsing MAINTAINERS..."
                #shellcheck disable=SC2086 #(allow globbing and splitting for $CODEMETAPY_ARGS)
                if ! codemetapy $CODEMETAPY_ARGS -O "$CACHEDIR/tmp/30-maintainers.$ID.codemeta.json" -i maintainers "MAINTAINERS" 2> "$TMPLOG" >&2; then
                    error "Parsing MAINTAINERS file failed for $ID (codemetapy failed)"
                fi
                flushlog
            fi

            if [ -f AUTHORS ]; then
                info "Parsing AUTHORS..."
                #shellcheck disable=SC2086 #(allow globbing and splitting for $CODEMETAPY_ARGS)
                if ! codemetapy $CODEMETAPY_ARGS -O "$CACHEDIR/tmp/31-authors.$ID.codemeta.json" -i authors "AUTHORS" 2> "$TMPLOG" >&2; then
                    error "Parsing AUTHORS file failed for $ID (codemetapy failed)"
                fi
                flushlog
            fi

            if [ -f CONTRIBUTORS ]; then
                info "Parsing CONTRIBUTORS..."
                #shellcheck disable=SC2086 #(allow globbing and splitting for $CODEMETAPY_ARGS)
                if ! codemetapy $CODEMETAPY_ARGS -O "$CACHEDIR/tmp/32-contributors.$ID.codemeta.json" -i contributors "CONTRIBUTORS" 2> "$TMPLOG" >&2; then
                    error "Parsing CONTRIBUTORS file failed for $ID (codemetapy failed)"
                fi
            else
                info "Getting contributors from git..."
                #Get all authors from git (in order of nr of commits)
                git shortlog -s -e | grep -Fv "@noreply" | grep -v "snyk-bot" | grep -v dependabot | sort -rn | cut -f 2 > "$CACHEDIR/tmp/$ID.CONTRIBUTORS"
                if [ -s "$CACHEDIR/tmp/$ID.CONTRIBUTORS" ]; then
                    #shellcheck disable=SC2086 #(allow globbing and splitting for $CODEMETAPY_ARGS)
                    if ! codemetapy $CODEMETAPY_ARGS -O "$CACHEDIR/tmp/32-contributors.$ID.codemeta.json" -i contributors "$CACHEDIR/tmp/$ID.CONTRIBUTORS" 2> "$TMPLOG" >&2; then
                        error "Parsing contributors failed for $ID (codemetapy failed)"
                    fi
                fi
            fi
            flushlog

            info "Extracting first and last commit date from git log...."
            DATE_UPDATED=$(git log -1 --date=format:"%Y-%m-%dT%TZ%z" --format="%ad")
            DATE_CREATED=$(git log --date=format:"%Y-%m-%dT%TZ%z" --format="%ad" | tail -n 1)
            if [ -n "$DATE_UPDATED" ] && [ -n "$DATE_CREATED" ]; then
                echo "{ \"dateCreated\": \"$DATE_CREATED\", \"dateModified\": \"$DATE_UPDATED\" }" > "$CACHEDIR/tmp/39-gitdate.$ID.codemeta.json"
            fi

            GIT_REMOTE_URL=$(git remote get-url origin | sed 's|git@|https://|' | sed "s|\.git$||")
            case "$GIT_REMOTE_URL" in
                https://github.com/*|https://gitlab.com/*)
                    info "Querying Github/GitLab API ($GIT_REMOTE_URL)"
                    #shellcheck disable=SC2086 #(allow globbing and splitting for $CODEMETAPY_ARGS)
                    if ! codemetapy $CODEMETAPY_ARGS -O "$CACHEDIR/tmp/40-githubapi.$ID.codemeta.json" "$GIT_REMOTE_URL" 2> "$TMPLOG" >&2; then

                        error "conversion from Github/GitLab API query failed for $ID ($GIT_REMOTE_URL) (codemetapy failed)"
                    fi
                    flushlog

                    #Add README URL
                    for f in README.rst README.rst README README.TXT; do
                        if [ -e "$f" ]; then
                            info "Found README"
                            echo " { \"readme\": \"$GIT_REMOTE_URL/blob/$REF/$f\" }"  > "$CACHEDIR/tmp/41-readme.$ID.codemeta.json"
                            break
                        fi
                    done

                    #Add build instructions URL
                    for f in INSTALL.md INSTALL BUILD.md BUILD; do
                        if [ -e "$f" ]; then
                            info "Found buildInstructions"
                            echo " { \"buildInstructions\": \"$GIT_REMOTE_URL/blob/$REF/$f\" }"  > "$CACHEDIR/tmp/42-buildinstructions.$ID.codemeta.json"
                            break
                        fi
                    done

                    #Add release notes URL and download URL
                    if [ -n "$REF" ] && [ "$REF" != "master" ] && [ "$REF" != "main" ]; then
                        info "Found releaseNotes"
                        echo " { \"releaseNotes\": \"$GIT_REMOTE_URL/releases/tag/$REF\", \"downloadUrl\": \"$GIT_REMOTE_URL/archive/refs/tags/$REF.zip\" }"  > "$CACHEDIR/tmp/43-releasenotes.$ID.codemeta.json"
                    fi
                    ;;
            esac



            if [ -e README.rst ] && [ ! -e README.md ]; then
                info "Converting README.rst to README.md"
                pandoc README.rst --to gfm -o README.md
                CLEAN_README=1
            fi

            for f in README.md README README.TXT; do
                if [ -e "$f" ]; then
                    #Detect developmentStatus via repostatus badges
                    info "Looking for repostatus information..."
                    REPOSTATUS=$("$SCRIPTDIR/detect-repostatus.sh" < "$f" 2> "$TMPLOG" | head -n 1)
                    if [ -n "$REPOSTATUS" ]; then
                        echo "{ \"developmentStatus\": \"$REPOSTATUS\" }" > "$CACHEDIR/tmp/10-repostatus.$ID.codemeta.json"
                    fi
                    flushlog

                    #Detect links to documentation
                    info "Looking for documentation links in README..."
                    SEQNR=50
                    URLS=$("$SCRIPTDIR/detect-documentation.sh" < "$f" 2> "$TMPLOG")
                    if [ -n "$URLS" ]; then
                        for URL in $URLS; do
                            TITLE=$(scrape_html_title "$URL")
                            [ -n "$TITLE" ] && TITLE="\"name\": \"$TITLE\","
                            echo "{ \"softwareHelp\": { \"@id\": \"$URL\", $TITLE \"@type\": \"WebSite\", \"url\": \"$URL\" } }" > "$CACHEDIR/tmp/$SEQNR-documentation.$ID.codemeta.json"
                            SEQNR=$((SEQNR+1))
                        done
                    fi
                    flushlog
                    break
                fi
            done

            #somef is optional because it relies on many dependencies that not everybody may want:
            if command -v somef 2> /dev/null >&2; then
                for f in README.md README README.TXT;  do
                    if [ -e "$f" ]; then
                        info "Analyzing README..."
                        if ! somef describe -c "$CACHEDIR/tmp/40-somef.$ID.codemeta.json" -d "$f" 2> "$TMPLOG" >&2; then
                            error "README to codemeta conversion failed for $ID"
                        fi
                        flushlog
                        break
                    fi
                done
            fi

            if [ -n "$REF" ] && [ "$REF" != "master" ] && [ "$REF" != "main" ]; then
                #in case no version number can be found anywhere, we fall back to the git tag
                info "Fall back to git tag if no version number is specified..."
                echo "{ \"version\": \"$REF\" }" > "$CACHEDIR/tmp/99-version.$ID.codemeta.json"
            fi

            #remove the readme again if it comes from our conversion
            [ $CLEAN_README -eq 1 ] && rm README.md

            cd "$oldcwd" || die "Unable to return to $oldcwd"
        fi
    done

    files=$(ls -r "$CACHEDIR"/tmp/*."$ID".codemeta.json | tr "\n" " ")

    if [ -z "$files" ]; then
        error "No metadata sources found for $ID"
        return 1
    fi

    RESCAN=0
    for f in $files; do
        if ! dasel -f "$f" -p json > /dev/null; then
            error "File $f is not valid JSON, removing..."
            rm "$f"
            RESCAN=1
        fi
    done

    [ $RESCAN -eq 1 ] && files=$(ls -r "$CACHEDIR"/tmp/*."$ID".codemeta.json | tr "\n" " ")

    #Last we reconciliate all metadata using codemetapy
    #this is done in increasing order of priority, where higher priority items (lower number) replace earlier lower priority ones
    if [ $STDOUT -eq 0 ]; then
        OUT_ARG="-O $OUTPUTDIR/$ID.codemeta.json"
    else
        OUT_ARG=""
    fi
    info "Reconciliating: codemetapy $CODEMETAPY_ARGS $CODEMETAPY_RECONCILE_ARGS $OUT_ARG $files"
    #shellcheck disable=SC2086 #(allow globbing and splitting for $CODEMETAPY_*ARGS)
    if ! codemetapy $CODEMETAPY_ARGS $CODEMETAPY_RECONCILE_ARGS $OUT_ARG $files 2> "$TMPLOG" >&2; then
        error "Failed to consolidate metadata $ID"
        [ $STDOUT -eq 0 ] && rm "$OUTPUTDIR/$ID.codemeta.json" 2>/dev/null #clean up possible partial output
        return 1
    else
        flushlog
        [ $STDOUT -eq 0 ] && info "Output written to $OUTPUTDIR/$ID.codemeta.json"
    fi
    [ $KEEPCACHE -eq 0 ] && rm -rf "$CACHEDIR/tmp/"*".$ID.codemeta.json"
}

harvest_service() {
    # Harvest metadata from a remote service endpoint and add it to the codemeta representation via
    # the "targetProduct" property and one of the software types (https://github.com/codemeta/codemeta/issues/271)
    ID="$1"
    URL="$2"
    info "Harvesting remote service URL $URL for $ID: codemetapy $CODEMETAPY_ARGS -O \"$CACHEDIR/tmp/$ID.codemeta.json\" \"$OUTPUTDIR/$ID.codemeta.json\" \"$URL\""
    if [ $STDOUT -eq 0 ]; then
        OUT_ARG="-O $OUTPUTDIR/$ID.codemeta.json"
    else
        OUT_ARG=""
    fi
    #shellcheck disable=SC2086 #(allow globbing and splitting for $CODEMETAPY_ARGS)
    if codemetapy $CODEMETAPY_ARGS -O "$CACHEDIR/tmp/$ID.codemeta.json" "$OUTPUTDIR/$ID.codemeta.json" "$URL" 2> "$TMPLOG" >&2; then
        flushlog
        mv -f "$CACHEDIR/tmp/$ID.codemeta.json" "$OUTPUTDIR/$ID.codemeta.json"
    else
        error "Failed to obtain or process metadata from remote service URL $URL for $ID"
        return 1
    fi
}


get_latest_version() {
    #Finds the latest git tag or falls back to returning the git default branch (usually master or main)
    #Assumes some kind of semantic versioning (possibly with a v prefix)
    TAG=$(git tag -l | grep -E "^v?[0-9]+(\.[0-9])*" | sort -t. -k 1.2,1n -k 2,2n -k 3,3n -k 4,4n | tail -n 1)
    if [ -z "$TAG" ]; then
        info "No releases found, falling back to default git branch!"
        git_default_branch
    else
        echo "$TAG"
    fi
}

git_default_branch() {
    #output the git default branch for the repository in the current working dir (usually master or main)
    git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'
}

scrape_html_title() {
    #Scrape the title from a webpage
    info "Scraping title from $1"
    curl -s -L "$1" | gawk 'BEGIN{IGNORECASE=1;FS="<title>|</title>";RS=EOF} {print $2}' | sed '/^$/d' | recode html..utf8 | sed "s/\"/'/g"
}

process() {
    #read a configuration file and harvest the source
    cd "$WORKDIR" || die "Unable to enter $WORKDIR"
    CONFIGFILE="$1"
    ID=$(basename "$CONFIGFILE" | sed -e 's/\.yaml//' -e 's/\.yml//')
    SOURCEREPO=$(dasel --null -r yaml ".source" < "$CONFIGFILE")
    ROOTPATH=$(dasel --null -r yaml ".root" < "$CONFIGFILE")
    SCANDIRS=$(dasel --null -r yaml --plain ".scandirs" < "$CONFIGFILE" | tr -d "[]")
    SERVICE_URLS=$(dasel --null -r yaml --plain ".services" < "$CONFIGFILE" | tr -d "[]")
    #Get the requested ref (branch or tag or commit) from the config (if present, otherwise the latest tag will be extracted automatically)
    REF=$(dasel --null -r yaml ".ref" < "$CONFIGFILE")
    if [ -z "$SOURCEREPO" ] || [ "$SOURCEREPO" = "null" ]; then
        die "invalid configuration: $ID"
    fi
    info "--> Processing $ID ($SOURCEREPO) [$(date)]"
    CODEMETAPY_RECONCILE_ARGS="--identifier \"$ID\" --codeRepository \"$SOURCEREPO\""
    if [ -d "$CACHEDIR/$ID" ]; then
        cd "$CACHEDIR/$ID" || die "failed to enter directory $CACHEDIR/$ID"
        info "Git updating cached clone of $SOURCEREPO..."
        if git fetch origin --tags 2> "$TMPLOG" >&2; then
            if [ -z "$REF" ] || [ "$REF" = "null" ]; then
                REF=$(get_latest_version)
            fi
            info "Using $REF"
            git -c advice.detachedHead=false checkout -f "$REF" 2> "$TMPLOG" >&2 || die "Invalid git ref '$REF' or unclean working dir"
            #pull may still be needed to fast-forward local branch
            if ! git pull origin $REF; then
                error "Failed to pull $SOURCEREPO"
                exit 1
            fi
            if [ -n "$ROOTPATH" ] && [ "$ROOTPATH" != "null" ]; then
                cd "$ROOTPATH" || die "Unable to enter $ROOTPATH"
            fi
            harvest "$ID" "$REF" "$CODEMETAPY_RECONCILE_ARGS" "$SCANDIRS" 2>&1 | tee "$OUTPUTDIR/$ID.harvest.log" >&2
        else
            error "Failed to git pull $SOURCEREPO"
            return 1
        fi
    else
        cd "$CACHEDIR" || die "failed to enter cache directory $CACHEDIR"
        info "Git cloning $SOURCEREPO..."
        if git clone "$SOURCEREPO" "$CACHEDIR/$ID" 2> "$TMPLOG" >&2; then
            cd "$CACHEDIR/$ID" || die "failed to enter dir $CACHEDIR/$ID"
            if [ -z "$REF" ] || [ "$REF" = "null" ]; then
                REF=$(get_latest_version)
            fi
            info "Using $REF for $ID"
            git -c advice.detachedHead=false checkout -f "$REF"  2> "$TMPLOG" >&2 || die "Invalid git ref '$REF' or unclean working dir"
            if [ -n "$ROOTPATH" ]  && [ "$ROOTPATH" != "null" ]; then
                cd "$ROOTPATH" || die "Unable to enter $ROOTPATH"
            fi
            if [ $STDOUT -eq 0 ]; then
                harvest "$ID" "$REF" "$CODEMETAPY_RECONCILE_ARGS" "$SCANDIRS" 2>&1 | tee "$OUTPUTDIR/$ID.harvest.log" >&2
            else
                harvest "$ID" "$REF" "$CODEMETAPY_RECONCILE_ARGS" "$SCANDIRS"
            fi
        else
            error "Failed to git clone $SOURCEREPO"
            return 1
        fi
    fi

    #Process services
    if [ -n "$SERVICE_URLS" ] && [ "$SERVICE_URLS" != "null" ]; then
        for URL in $SERVICE_URLS; do
            if [ $STDOUT -eq 0 ]; then
                harvest_service "$ID" "$URL" 2>&1  | tee -a "$CACHEDIR/tmp/$ID.log" >&2
            else
                harvest_service "$ID" "$URL"
            fi
        done
    fi

    [ $STDOUT -eq 0 ] && info "Log written to $OUTPUTDIR/$ID.harvest.log"
    info "<-- Finished processing $ID ($SOURCEREPO) [$(date)]"
}

if [ $# -eq 0 ]; then
    #no configuration provided, just harvest only current project
    if [ -z "$IDENTIFIER" ]; then
        IDENTIFIER="$(basename "$(pwd)")"
    fi
    info "Attempting to guess source repo"
    SOURCEREPO=$(git remote get-url origin | sed -e "s|git@\(.*\):|https://\1/|")
    if [ -n "$SOURCEREPO" ]; then
        info "Source repo is $SOURCEREPO"
        CODEMETAPY_RECONCILE_ARGS="--identifier \"$IDENTIFIER\" --codeRepository \"$SOURCEREPO\""
    else
        CODEMETAPY_RECONCILE_ARGS="--identifier \"$IDENTIFIER\""
    fi
    if harvest "$IDENTIFIER" "" "$CODEMETAPY_RECONCILE_ARGS"; then
        if [ ! -e "codemeta.json" ] || [ $REGEN -eq 1 ]; then
            mv "$OUTPUTDIR/$IDENTIFIER.codemeta.json" codemeta.json && info "Output renamed to $(pwd)/codemeta.json"
        fi
    fi
else
    #configuration files/directory provided, process them
    WORKDIR=$(pwd)
    for TARGET in "$@"; do
        if [ -f "$TARGET" ]; then
            process "$TARGET"
        elif [ -d "$TARGET" ]; then
            for SUBTARGET in "$TARGET"/*.yml; do
                process "$SUBTARGET"
            done
        fi
    done
fi
